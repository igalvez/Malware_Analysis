import os
import subprocess
import shutil
import sys
from libPDF import LibPDF

pastaResumo='/home/ingrid/Analisador/resumo/'
pastaArtefato = '/home/ingrid/Analisador/Artefato/'


class ClassArtefato:
	#artefato:
	#nome 
	#hash 
	#tipo 
	#bib_e1 
	#compactacao
    #metadata
	#arquivos_Criados 
	#arquivos_Modificados
	#arquivos_Apagados 
	#taskes 
	#registro 
	#bib_d1 
	
	def __init__(self):
		self.nome = None
		self.hash = None
		self.pid = None
		self.metadata = []
		self.tipo = None
		self.bib_e1 = []
		self.compactacao = None
		self.arquivos_Criados = []
		self.arquivos_Modificados = []
		self.arquivos_Apagados  = []
		self.taskes = []
		self.registro = []
		self.libs = []
		self.rede = []
		
	def colectData(self):
	    aux = 0
	    print '\nCOLECT DATA\n'
	    
	        
	    try:
	        bib_est = open('/home/ingrid/Analisador/resultado/bibAEst.txt','r')
	        p = bib_est.readline() 
	        while (p!=''):
	            self.bib_e1.append(p)   
	            p = bib_est.readline()
	        bib_est.close()
	        
	    except:
	        pass
	     
	    try:
	        metadata = open('/home/ingrid/Analisador/resultado/metadata.txt','r')
	        p=''
	        p=metadata.readline()
	        while(p!=''):
	            self.metadata.append(p)
	            p=metadata.readline()
	        metadata.close()
	    except:
	        pass
	        
	            
	    try:
	        print '\nPROCESSOS\n'
	        processos = open('/home/ingrid/Analisador/resultado/processos.txt','r')
	        p=processos.readline()
	        while(p!=''): 
	            self.taskes.append(p)
	            p=processos.readline()
	        processos.close()
	    except:
	        pass

	    try:
	        aCriados = open('/home/ingrid/Analisador/resultado/arquivosCriados.txt','r')
	        p=aCriados.readline()
	        while(p!=''):
	            self.arquivos_Criados.append(p)
	            p=aCriados.readline()
	        aCriados.close()
	    except:
	        pass
	     
	    try:
	        aModificados = open('/home/ingrid/Analisador/resultado/arquivosModificados.txt','r')
	        p=aModificados.readline()
	        while(p!=''):
	            self.arquivos_Modificados.append(p)
	            p=aModificados.readline()
	        aModificados.close()
	    except: 
	        pass
	     
	    try:
	        aApagados = open('/home/ingrid/Analisador/resultado/arquivosApagados.txt','r')
	        p=aApagados.readline()
	        while(p!=''):
	            self.arquivos_Apagados.append(p)
	            p=aApagados.readline()
	        aApagados.close()
	    except:
	        pass
	       
	    try:
	        registro = open('/home/ingrid/Analisador/resultado/registro.txt','r')
	        p=registro.readline()
	        while(p!=''):
	            self.registro.append(p)
	            p=registro.readline()
	        registro.close()
	    except:
	        pass
	       
	    try:
	        compactacao = open('/home/ingrid/Analisador/resultado/compactacao.txt','r')
	        self.compactacao = compactacao.read()
	    except:
	        pass
	    
	    try:
	        variados = open('/home/ingrid/Analisador/resultado/identificacao.txt','r')
	        self.nome = variados.readline()
	        print '\n NOME ' + self.nome + '\n'
	        self.hash = variados.readline()
	        self.tipo = variados.readline()
	    except:
	        print 'errooo'
	        pass
	    
	    
	    self.parseLibraries()

	        
	    if 1:
	        rede_arq = open('/home/ingrid/Analisador/resultado/rede.txt','r')
	        p = rede_arq.readline()
	        while(p!=''):
	            self.rede.append(p)
	            p = rede_arq.readline()
	        rede_arq.close()
	    #except:
	    #    pass
	        
	        
	        
	        
	    return 0
	 
	def writeList(self, lista, arq):
	    for i in lista:
	        #print 'i ' + i + '\n'
	        arq.write(i.strip('\n\r') + '\n')
	        
	def parseLibraries(self):
	
	    bibliotecas = open('/home/ingrid/Analisador/resultado/bibliotecas.txt','r')
	    cont = 0
	    aux = 0
	    indice = 0
	    lista1 = []
	    p = bibliotecas.readline()
	    
	    while(p!=''):
	        self.libs.append(p)
	        p = bibliotecas.readline()
	        
	   #print 'cont ' + str(cont)
	   #lista2 = [[]]*cont
	    
	   # for i in lista1:
	    #    if aux==0:
	    #        aux = aux + 1  
	     #       lista2[indice].append(i)  
	     #   elif 'Arquivo' in i:
	      #      indice = indice + 1
	       #     lista2[indice].append('\n' + i)
	        #else:
	         #   lista2[indice].append(i)
	       # print 'indice ' + str(indice)
	        
	    #print str(lista2)
	        
	    bibliotecas.close()
	    
	
	       	        
	            
	         
	    
	def maketxt(self,pasta,tempo):
	    nome = self.nome
	    arquivo = open(pasta + nome.strip('.exe\r\n') + '.txt', 'w')
	    arquivo.write('NOME: ' + self.nome.strip('\n\r'))
	    arquivo.write('\nHASH: ' + self.hash.strip('\n\r'))
	    arquivo.write('\nTIPO: ' + self.tipo.strip('\n\r'))
	    if(self.compactacao!=None):
	        arquivo.write('\nCOMPACTACAO: ' + self.compactacao.strip('\n\r'))
	   
	    arquivo.write('\nMETADATA:\n')
	    self.writeList(self.metadata,arquivo)
	    arquivo.write('tempo de analise: ' + tempo + '\n\n')
	    if(len(self.bib_e1))>0:
	        arquivo.write('\n\nBIBLIOTECAS EM TEMPO DE CARREGAMENTO:\n')
	        self.writeList(self.bib_e1, arquivo)
	        
	    arquivo.write('\n\nPROCESSOS CRIADOS:\n')
	    self.writeList(self.taskes, arquivo)
	    
	    
	    if(len(self.arquivos_Criados)>0):
	        arquivo.write('\n\nARQUIVOS CRIADOS:\n')
	        self.writeList(self.arquivos_Criados, arquivo)
	        
	    if(len(self.arquivos_Apagados)>0):
	        arquivo.write('\n\nARQUIVOS APAGADOS:\n')
	        self.writeList(self.arquivos_Apagados, arquivo)
	        
	    if(len(self.arquivos_Modificados)>0):
	        arquivo.write('\n\nARQUIVOS MODIFICADOS:\n')
	        self.writeList(self.arquivos_Modificados, arquivo)
	        
	    if(len(self.registro)>0):
	        arquivo.write('\n\nCHAVES DE REGISTRO ALTERADAS:\n')
	        self.writeList(self.registro, arquivo)
	    
	    if(len(self.libs)>0):
	        arquivo.write('\n\nBIBLIOTECAS EM TEMPO DE EXECUCAO:\n')
	        self.writeList(self.libs,arquivo)
	        
	  
	        
	    arquivo.close()
	    
	    
	    
	    
	def makePDF(self,pasta, tempo):
	    print '\n ENTROU NO RELATORIO PDF \n'
	    fonts = ['Helvetica','Helvetica-Bold','Helvetica-BoldOblique']
	    sizes = [10,12,20] 
	    
	    for i in self.arquivos_Criados:
	        print i + '\n'
	    
	    if (self.nome!=None):
	        self.nome.strip('\n')
	        self.nome.strip('\r')
	        narquivo = pasta + self.nome.strip('\n\r') + '.pdf'	
	        print '\n NARQUIVO ' + narquivo +'\n'
	    else:
	        print '\n OUT\n'
	        return -1
	        
	    report = LibPDF(self.nome, narquivo, fonts, sizes)
	    report.pdfText('Tempo de analise: ' + tempo + ' segundos',0)
	    report.pdfText('Nome:', 1)
	    report.pdfText(self.nome,0)
	    report.pdfText('MD5 hash: ',1)
	    report.pdfText(self.hash,0)
	    report.pdfText('Tipo de arquivo: ',1)
	    report.pdfText(self.tipo,0)
	   
	    if(len(self.metadata)>0):
	        report.pdfText('Metadata Colhida',1)
	        report.pdfTextList(self.metadata)
			
	    if(len(self.bib_e1)>0):
	        report.pdfText('Bibliotecas em tempo de carregamento: ',1)
	        report.pdfTextList(self.bib_e1)
	    if(self.compactacao!=''):
	        report.pdfText('Arquivo Compactado: ',1)
	        report.pdfText(str(self.compactacao),0)
	        
		print 'processo criado'
		report.pdfText('Processos Criados:',1)
		print 'fimprocessocriado'
		report.pdfTextList(self.taskes)
		
	    if(len(self.arquivos_Criados)>0):
	        report.pdfText('Arquivos Criados:',1)
	        report.pdfTextList(self.arquivos_Criados)
	        
		if(len(self.arquivos_Apagados)>0):
		    #raw_input('aa')
		    report.pdfText('Arquivos Apagados:',1)
		    report.pdfTextList(self.arquivos_Apagados)
		    
	    if(len(self.arquivos_Modificados)>0):
	        #raw_input('aM')
	    	report.pdfText('Arquivos Modificados:',1)
	    	report.pdfTextList(self.arquivos_Modificados)
		
	    if(len(self.registro)>0):
	    	report.pdfText('Chaves de registro alteradas:',1)
	    	report.pdfTextList(self.registro)	
	    	
	    if(len(self.libs)>0):
	    	report.pdfText('Bibliotecas:',1)
	        report.pdfTextList(self.libs)
	            
	    #if(len(self.rede)>0):
	    #	report.pdfText('Trafego de rede:',1)
	    #	report.pdfTextList(self.rede)	
	    
		
		report.makeDocument()
	        
	    
	    #report.drawObject()
	    #report.show()
	    #report.saveDocument()
		#report.makeDocument()


	  
def main(argv):
    tempo = 0
    
    if(len(sys.argv)>0):
        tempo = sys.argv[1]
        
    document = ClassArtefato()
    document.colectData()
    document.maketxt('/home/ingrid/Analisador/Relatorios/', tempo)
    document.makePDF('/home/ingrid/Analisador/Relatorios/', tempo)
    
if __name__ == "__main__":
    main(sys.argv)

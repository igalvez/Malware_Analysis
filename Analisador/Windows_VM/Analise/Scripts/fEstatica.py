import os
import subprocess
import sys
import fDinamica2
import pefile
import peutils
import shutil
from classArtefato import ClassArtefato



###########################################	ANALISE ESTATICA ########################################################
#																													#
#																													#
#									   1 - Hash            		   (OK)											    #
#									   2 - Tipo de Arquivo         (OK)                								#
#									   3 - Bibliotecas Dinamicas   (OK)												#
#									   4 - Scanner de Virus             											#
#									   5 - Tipo de Compactacao	   (OK)	                                            #
#                                      6 - Metadados       [GT2]             									        #
#									                               											   	    #
#																												    #
#																											        #
#####################################################################################################################


pastaRelatorio = 'C:\\Analise\\Relatorios\\'
 
def get_metadata(artefato):
	raw_metadata = subprocess.Popen('gt2 ' + artefato, shell=True, stdout=subprocess.PIPE).stdout.read()
	
	
def unzip(pasta):
	c1 = subprocess.Popen('unzip ' + pasta + '*.zip -d ' + pasta, shell=True, stdout=subprocess.PIPE)
	c1.communicate()
	#c2 = subprocess.Popen('rm ' + pasta + '*.zip', shell=True, stdout = subprocess.PIPE)
	#c2.communicate()
	
	

def analiseTudo(art,nome):
	
	novoArtefato = None
	arqF = open('teste.txt','w')
	
	for arquivo in art:
		novoArtefato = None
		print '\n ARQUIVOANTES ' + nome + arquivo
		arquivo = arquivo.strip('\n')
		arqF.write('ARQUIVO ' + nome + arquivo)
		print 'EH ARQUIVO? ' + str(os.path.isfile(nome + arquivo))
		arq = nome + arquivo
		novoArtefato = ClassArtefato(arq, arquivo)
		print 'ARQUIVO ESTATICO: ' + novoArtefato.artefato
		
		if (os.path.isfile(arq)):
			existe = 0 
			
			# 1 - Calcula Hash
			novoArtefato.calculaHash()
			#nhash = subprocess.Popen('md5sum \"' + arq + '\" | cut -d\" \" -f1', shell=True, stdout=subprocess.PIPE)
			#nhash = nhash.stdout.read().strip('\\')
			print 'ARQUIVO ' + arquivo
			print 'HASH ' + novoArtefato.hash
			
			# Abre arquivo de hashes
			fHash = open('rHashes.txt', 'a+')
			lhashes = list(fHash.readlines())
			
			# 2 - Compara hash recem calculado com arquivo de hashes
			for chash in lhashes:
				if(chash == novoArtefato.hash):
					existe = 1
					break
					
			# 3 - Se arquivo ainda nao existir em lista de hashes adicionar e criar relatorio pra novo arquivo
			if(existe == 0):
				relatorio = open(pastaRelatorio + novoArtefato.hash.strip('\n\r') + '.txt', 'w')
				fHash.write(novoArtefato.hash) # Adiciona novo hash ao arquivo de hashes
				
				relatorio.write('Hash: ' + novoArtefato.hash)    # a - Registra hash do arquivo no relatorio
				relatorio.write('Arquivo: ' + arquivo) # b - Registra nome do arquivo
				
				# Usa comando file para descobrir tipo de arquivo
				#tipo = ' '
				#tipo = subprocess.Popen('file \"' + arq + '\" | cut -d\";\" -f2', shell=True, stdout=subprocess.PIPE).stdout.read()
				#relatorio.write('\nTipo: ' + tipo) # c - Registra tipo de arquivo
				novoArtefato.defineTipo()
				
				if 'executable' in novoArtefato.tipo:
				    # verifica se arquivo esta compactado
					print 'EXE IN ARQUIVO'
					
					
					#Colhe metadata
					novoArtefato.analiseMetadata()
					###novoArtefato.defineCompactacao('C:\\Analise\\UserDB.txt')
					print '\n out\n'
					#x = raw_input('Enter your input:')
					
					#pe = pefile.PE(arq)
					#signatures = peutils.SignatureDatabase('C:\\Analise\\UserDB.txt')
					#matches = signatures.match_all(pe, ep_only=True)
					
					# Copia arquivos executaveis para pasta a submetida para o virus total
					shutil.copy(arq, 'C:\\Analise\\VirusTotal\\')
					# Usa programa DUMPBIN para listar bibliotecas dinamicas
					novoArtefato.analiseEstaticaBib()
				
					if '(DLL)' not in novoArtefato.tipo:
						try:
							fDinamica2.analiseDinamica(novoArtefato, relatorio)
						except:
							novoArtefato.geraRelatorio(0)
					else:
						pass #RUNDLL32.exe
				
				relatorio.close()
			#del novoArtefato
		
		elif (os.path.isdir(arq)):
			print 'DIRETORIOOOO'
			newarq = os.listdir(arq + '\\')
			print str(newarq)
			n = arq + '\\'
			analiseTudo(newarq,n)
		del novoArtefato	
	arqF.close()
	
